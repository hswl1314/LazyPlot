cat("\n=== Sample Capacity Calculation ===\n")
cat("Start time:", format(start_time_processed, "%Y-%m-%d %H:%M"), "\n")
cat("End time:", format(end_time_processed, "%Y-%m-%d %H:%M"), "\n")
cat("Time per sample:", minutes_per_sample, "minutes\n")
cat("Available time:", available_hours, "hours\n")
cat("Maximum samples possible:", max_samples, "\n")
cat("================================\n")
# Return results invisibly
invisible(list(
start_time = start_time_processed,
end_time = end_time_processed,
available_hours = available_hours,
max_samples = max_samples,
minutes_per_sample = minutes_per_sample
))
}
# 只使用时间格式
how_many_samples_possible(
end_time = "17:00",
minutes_per_sample = 13,
start_time = "09:00"
)
# 使用完整日期时间格式
how_many_samples_possible(
end_time = "2024-01-21 17:00",
minutes_per_sample = 13,
start_time = "2024-01-20 09:00"
)
# 混合使用（开始时间只用时间，结束时间用完整日期时间）
how_many_samples_possible(
end_time = "2024-01-21 17:00",
minutes_per_sample = 13,
start_time = "09:00"
)
#'
#' @return A list containing analysis time details
#' @export
#'
#' @examples
#' # Using time-only format (will use system date)
#' how_many_samples_possible("17:00", 13, "09:00")
#'
#' # Using full datetime format
#' how_many_samples_possible("2024-01-21 17:00", 13, "2024-01-20 09:00")
how_many_samples_possible <- function(end_time,
minutes_per_sample,
start_time = NULL) {
# Function to process time input
process_time <- function(time_str, time_type = "start") {
# If start_time is NULL, use current system time
if (is.null(time_str)) {
if (time_type == "start") {
return(Sys.time())
} else {
stop("End time cannot be NULL")
}
}
# Get current system date
current_date <- format(Sys.Date(), "%Y-%m-%d")
# Process time string
if (grepl("^\\d{1,2}:\\d{2}$", time_str)) {
# For HH:MM format, combine with current system date
time_str <- paste(current_date, time_str)
} else if (!grepl("^\\d{4}-\\d{2}-\\d{2} \\d{1,2}:\\d{2}$", time_str)) {
stop(paste("Invalid", time_type,
"time format. Use either 'HH:MM' or 'YYYY-MM-DD HH:MM'"))
}
# Convert to POSIXct
result <- as.POSIXct(time_str)
if (is.na(result)) {
stop(paste("Invalid", time_type, "time value"))
}
return(result)
}
# Process times
start_time_processed <- process_time(start_time, "start")
end_time_processed <- process_time(end_time, "end")
# Check if end time is after start time
if (end_time_processed <= start_time_processed) {
# If using time-only format and end time is earlier, add one day to end time
if (grepl("^\\d{1,2}:\\d{2}$", end_time)) {
end_time_processed <- end_time_processed + 24*60*60
} else {
stop("End time must be later than start time!\n",
"Start time: ", format(start_time_processed, "%Y-%m-%d %H:%M"), "\n",
"End time: ", format(end_time_processed, "%Y-%m-%d %H:%M"))
}
}
# Calculate available time and maximum samples
available_minutes <- as.numeric(difftime(end_time_processed,
start_time_processed,
units = "mins"))
max_samples <- floor(available_minutes / minutes_per_sample)
available_hours <- round(available_minutes / 60, 2)
# Print formatted output
cat("\n=== Sample Capacity Calculation ===\n")
cat("Start time:", format(start_time_processed, "%Y-%m-%d %H:%M"), "\n")
cat("End time:", format(end_time_processed, "%Y-%m-%d %H:%M"), "\n")
cat("Time per sample:", minutes_per_sample, "minutes\n")
cat("Available time:", available_hours, "hours\n")
cat("Maximum samples possible:", max_samples, "\n")
cat("================================\n")
# Return results invisibly
invisible(list(
start_time = start_time_processed,
end_time = end_time_processed,
available_hours = available_hours,
max_samples = max_samples,
minutes_per_sample = minutes_per_sample
))
}
# 1. 只输入时间（自动使用系统日期）
how_many_samples_possible(
end_time = "17:00",
minutes_per_sample = 13,
start_time = "09:00"
)
# 2. 使用完整的日期时间
how_many_samples_possible(
end_time = "2024-01-21 17:00",
minutes_per_sample = 13,
start_time = "2024-01-20 09:00"
)
# 3. 使用当前系统时间作为开始时间
how_many_samples_possible(
end_time = "17:00",
minutes_per_sample = 13
)
# 2. 使用完整的日期时间
how_many_samples_possible(
end_time = "2024-01-21 17:00",
minutes_per_sample = 13,
start_time = "09:00"
)
# 3. 使用当前系统时间作为开始时间
how_many_samples_possible(
end_time = "17:00",
minutes_per_sample = 13
)
# 3. 使用当前系统时间作为开始时间
how_many_samples_possible(
end_time = "17:00",
minutes_per_sample = 22
)
#'
#' @return A list containing analysis time details
#' @export
#'
#' @examples
#' # Using time-only format (will use system date)
#' how_many_sample_add("17:00", 13, "09:00")
#'
#' # Using full datetime format
#' how_many_sample_add("2024-01-21 17:00", 13, "2024-01-20 09:00")
how_many_sample_add <- function(end_time,
minutes_per_sample,
start_time = NULL) {
# Function to process time input
process_time <- function(time_str, time_type = "start") {
# If start_time is NULL, use current system time
if (is.null(time_str)) {
if (time_type == "start") {
return(Sys.time())
} else {
stop("End time cannot be NULL")
}
}
# Get current system date
current_date <- format(Sys.Date(), "%Y-%m-%d")
# Process time string
if (grepl("^\\d{1,2}:\\d{2}$", time_str)) {
# For HH:MM format, combine with current system date
time_str <- paste(current_date, time_str)
} else if (!grepl("^\\d{4}-\\d{2}-\\d{2} \\d{1,2}:\\d{2}$", time_str)) {
stop(paste("Invalid", time_type,
"time format. Use either 'HH:MM' or 'YYYY-MM-DD HH:MM'"))
}
# Convert to POSIXct
result <- as.POSIXct(time_str)
if (is.na(result)) {
stop(paste("Invalid", time_type, "time value"))
}
return(result)
}
# Process times
start_time_processed <- process_time(start_time, "start")
end_time_processed <- process_time(end_time, "end")
# Check if end time is after start time
if (end_time_processed <= start_time_processed) {
# If using time-only format and end time is earlier, add one day to end time
if (grepl("^\\d{1,2}:\\d{2}$", end_time)) {
end_time_processed <- end_time_processed + 24*60*60
} else {
stop("End time must be later than start time!\n",
"Start time: ", format(start_time_processed, "%Y-%m-%d %H:%M"), "\n",
"End time: ", format(end_time_processed, "%Y-%m-%d %H:%M"))
}
}
# Calculate available time and maximum samples
available_minutes <- as.numeric(difftime(end_time_processed,
start_time_processed,
units = "mins"))
max_samples <- floor(available_minutes / minutes_per_sample)
available_hours <- round(available_minutes / 60, 2)
# Print formatted output
cat("\n=== Sample Capacity Calculation ===\n")
cat("Start time:", format(start_time_processed, "%Y-%m-%d %H:%M"), "\n")
cat("End time:", format(end_time_processed, "%Y-%m-%d %H:%M"), "\n")
cat("Time per sample:", minutes_per_sample, "minutes\n")
cat("Available time:", available_hours, "hours\n")
cat("Maximum samples possible:", max_samples, "\n")
cat("================================\n")
# Return results invisibly
invisible(list(
start_time = start_time_processed,
end_time = end_time_processed,
available_hours = available_hours,
max_samples = max_samples,
minutes_per_sample = minutes_per_sample
))
}
#' )
#'
#' # Example 4: Using system time explicitly
#' how_many_sample_add(
#'   end_time = "17:00",
#'   minutes_per_sample = 13,
#'   start_time = Sys.time()
#' )
#'
#' @export
how_many_sample_add <- function(end_time,
minutes_per_sample,
start_time = NULL) {
# Function to process time input
process_time <- function(time_str, time_type = "start") {
# Handle NULL or POSIXct input for start time
if (time_type == "start") {
if (is.null(time_str)) {
return(Sys.time())
}
if (inherits(time_str, "POSIXct")) {
return(time_str)
}
} else if (is.null(time_str)) {
stop("End time cannot be NULL")
}
# Get current system date
current_date <- format(Sys.Date(), "%Y-%m-%d")
# Process time string
if (grepl("^\\d{1,2}:\\d{2}$", time_str)) {
# For HH:MM format, combine with current system date
time_str <- paste(current_date, time_str)
} else if (!grepl("^\\d{4}-\\d{2}-\\d{2} \\d{1,2}:\\d{2}$", time_str)) {
stop(paste("Invalid", time_type,
"time format. Use either 'HH:MM' or 'YYYY-MM-DD HH:MM'"))
}
# Convert to POSIXct
result <- as.POSIXct(time_str)
if (is.na(result)) {
stop(paste("Invalid", time_type, "time value"))
}
return(result)
}
# Process times
start_time_processed <- process_time(start_time, "start")
end_time_processed <- process_time(end_time, "end")
# Check if end time is after start time
if (end_time_processed <= start_time_processed) {
# If using time-only format and end time is earlier, add one day to end time
if (grepl("^\\d{1,2}:\\d{2}$", end_time)) {
end_time_processed <- end_time_processed + 24*60*60
} else {
stop("End time must be later than start time!\n",
"Start time: ", format(start_time_processed, "%Y-%m-%d %H:%M"), "\n",
"End time: ", format(end_time_processed, "%Y-%m-%d %H:%M"))
}
}
# Calculate available time and maximum samples
available_minutes <- as.numeric(difftime(end_time_processed,
start_time_processed,
units = "mins"))
max_samples <- floor(available_minutes / minutes_per_sample)
available_hours <- round(available_minutes / 60, 2)
# Print formatted output
cat("\n=== Sample Capacity Calculation ===\n")
cat("Start time:", format(start_time_processed, "%Y-%m-%d %H:%M"), "\n")
cat("End time:", format(end_time_processed, "%Y-%m-%d %H:%M"), "\n")
cat("Time per sample:", minutes_per_sample, "minutes\n")
cat("Available time:", available_hours, "hours\n")
cat("Maximum samples possible:", max_samples, "\n")
cat("================================\n")
# Return results invisibly
invisible(list(
start_time = start_time_processed,
end_time = end_time_processed,
available_hours = available_hours,
max_samples = max_samples,
minutes_per_sample = minutes_per_sample
))
}
# 使用当前时间作为开始时间，指定结束时间
how_many_sample_add(
end_time = "17:00",          # 今天下午5点
minutes_per_sample = 13      # 每个样品13分钟
)
# 使用今天的具体时间点
how_many_sample_add(
end_time = "17:00",          # 今天下午5点
minutes_per_sample = 13,     # 每个样品13分钟
start_time = "09:00"         # 今天上午9点
)
# 指定具体的日期和时间
how_many_sample_add(
end_time = "2024-01-21 17:00",      # 2024年1月21日下午5点
minutes_per_sample = 13,             # 每个样品13分钟
start_time = "2024-01-20 09:00"     # 2024年1月20日上午9点
)
# 使用当前系统时间作为开始时间
how_many_sample_add(
end_time = "17:00",          # 今天下午5点
minutes_per_sample = 13,     # 每个样品13分钟
start_time = Sys.time()      # 当前系统时间
)
# 使用当前时间作为开始时间，指定结束时间
how_many_sample_add(
end_time = "17:00",          # 今天下午5点
minutes_per_sample = 13      # 每个样品13分钟
)
# 使用当前系统时间作为开始时间
how_many_sample_add(
end_time = "17:00",          # 今天下午5点
minutes_per_sample = 13,     # 每个样品13分钟
start_time = Sys.time()      # 当前系统时间
)
library(LazyPlot)
set.seed(123)
df_example <- data.frame(
SampleID = paste0("Sample_", 1:60),
Group = rep(c("Control", "Treatment1", "Treatment2"), each = 20),
Var1 = rnorm(60, mean = 10, sd = 2),
Var2 = rnorm(60, mean = 15, sd = 3),
Var3 = rnorm(60, mean = 20, sd = 4)
)
# Use all groups automatically
pca_plot1 <- draw_pca(df = df_example)
pca_plot1
# Example 2: Specify groups and customize appearance
pca_plot2 <- draw_pca(
df = df_example,
Group = c("Control", "Treatment1"),  # Use only two groups
colors = c("#1F77B4", "#FF7F0E"),
point_size = 4,
show_stats = TRUE
)
pca_plot2
ranges <- pca_check(df_example)
detach("package:LazyPlot", unload = TRUE)
remove.packages("MStools")
devtools::install_github("hswl1314/MStools")
how_many_sample_add(
end_time = "22:00",
minutes_per_sample = 13
)
library(MStools)
how_many_sample_add(
end_time = "22:00",
minutes_per_sample = 13
)
# Example 2: Using time-only format (will use system date)
how_many_sample_add(
end_time = "22:00",
minutes_per_sample = 13,
start_time = "10:00"
)
# Example 2: Using time-only format (will use system date)
how_many_sample_add(
end_time = "22:00",
minutes_per_sample = 13,
start_time = "9:00"
)
# Example 3: Using full datetime format
how_many_sample_add(
end_time = "2024-01-21 17:00",
minutes_per_sample = 13,
start_time = "2024-01-20 09:00"
)
# Example 4: Using system time explicitly
how_many_sample_add(
end_time = "17:00",
minutes_per_sample = 13,
start_time = Sys.time()
)
# Example 3: Using full datetime format
how_many_sample_add(
end_time = "2024-01-22 17:00",
minutes_per_sample = 13,
start_time = "2024-01-20 09:00"
)
when_you_add_samples(sample_count = 75, minutes_per_sample = 13)
when_you_add_samples(sample_count = 60, minutes_per_sample = 13)
# Using only time (will use today's date)
when_you_add_samples(
sample_count = 75,
minutes_per_sample = 13,
start_time = "09:00"
)
# Using only time (will use today's date)
when_you_add_samples(
sample_count = 110,
minutes_per_sample = 13,
start_time = "09:00"
)
# Using only time (will use today's date)
when_you_add_samples(
sample_count = 112,
minutes_per_sample = 13,
start_time = "09:00"
)
# Using only time (will use today's date)
when_you_add_samples(
sample_count = 111,
minutes_per_sample = 13,
start_time = "09:00"
)
# Using only time (will use today's date)
when_you_add_samples(
sample_count = 110,
minutes_per_sample = 13,
start_time = "09:00"
)
when_you_add_samples(sample_count = 30, minutes_per_sample = 13)
how_many_sample_add(
end_time = "2024-01-17 10:00",
minutes_per_sample = 13,
start_time = "2024-12-16 16:33"
)
how_many_sample_add(
end_time = "2024-01-17 10:00",
minutes_per_sample = 13,
start_time = "2024-12-16 16:33"
)
how_many_sample_add(
end_time = "2024-12-17 10:00",
minutes_per_sample = 13,
start_time = "2024-12-16 16:33"
)
# Using specific date and time
when_you_add_samples(
sample_count = 75,
minutes_per_sample = 13,
start_time = "2024-12-16 16:33"
)
run_MSdial_to_Jupyter_app()
when_you_add_samples(sample_count = 70,minutes_per_sample = 13)
when_you_add_samples(sample_count = 29,minutes_per_sample = 13)
when_you_add_samples(sample_count = 105,minutes_per_sample = 13)
minutes_per_sample = 13,start_time = "2024-12-16 16:28
how_many_sample_add(end_time = "2024-12-17 12:00",
minutes_per_sample = 13,
start_time = "2024-12-16 16:28"
)
A <- data.frame(
Sample1 = c(10, 15, 20),
Sample2 = c(12, 18, 22),
Sample3 = c(14, 16, 24)
)
rownames(A) <- c("Gene1", "Gene2", "Gene3")
colSample_to_rowSample(A)
library(LazyPlot)
A <- data.frame(
Sample1 = c(10, 15, 20),
Sample2 = c(12, 18, 22),
Sample3 = c(14, 16, 24)
)
rownames(A) <- c("Gene1", "Gene2", "Gene3")
colSample_to_rowSample(A)
colSample_to_rowSample(A, id_col = "Sample_Name")
ss<-colSample_to_rowSample(A, id_col = "Sample_Name")
View(ss)
View(A)
ff<-colSample_to_rowSample(A)
View(ff)
set.seed(123)
df_example <- data.frame(
SampleID = paste0("Sample_", 1:60),
Group = rep(c("Control", "Treatment1", "Treatment2"), each = 20),
Var1 = rnorm(60, mean = 10, sd = 2),
Var2 = rnorm(60, mean = 15, sd = 3),
Var3 = rnorm(60, mean = 20, sd = 4)
)
# Use all groups automatically
pca_plot1 <- draw_pca(df = df_example)
pca_plot1
# Example 2: Specify groups and customize appearance
pca_plot2 <- draw_pca(
df = df_example,
Group = c("Control", "Treatment1"),  # Use only two groups
colors = c("#1F77B4", "#FF7F0E"),
point_size = 4,
show_stats = TRUE
)
pca_plot2
ranges <- pca_check(df_example)
View(ff)
rowSample_to_colSample(ss)
rowSample_to_colSample(ff)
View(ss)
rowSample_to_colSample(ss,id_col ="Sample_Name" )
library(MStools)
?when_you_add_samples
?run_MSdial_to_Jupyter_app
